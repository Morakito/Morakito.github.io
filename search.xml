<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>条款03：尽可能使用const</title>
    <url>/2020/06/Effective-C++/Effective-CPP-03/</url>
    <content><![CDATA[<h3 id="const的作用"><a href="#const的作用" class="headerlink" title="const的作用"></a>const的作用</h3><p>1，告诉编译器和其他程序员某值应该保持不变<br>2，会获得编译器的帮助提示</p>
<h3 id="const的语法：常量声名"><a href="#const的语法：常量声名" class="headerlink" title="const的语法：常量声名"></a>const的语法：常量声名</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> greeting[] = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure>
<p>1，如果const出现在*****的左边，表示被指物是常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting;   <span class="comment">//不可以修改*p，可以修改p</span></span><br></pre></td></tr></table></figure>
<p>2，如果const出现在*****的右边，表示指针自身是常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;   <span class="comment">//可以修改*p，不可以修改p</span></span><br></pre></td></tr></table></figure>
<p>3，如果const出现在*****两边，表示被指物和指针都是常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;   <span class="comment">//不可以修改*p，不可以修改p</span></span><br></pre></td></tr></table></figure>
<h3 id="const的语法：函数声名"><a href="#const的语法：函数声名" class="headerlink" title="const的语法：函数声名"></a>const的语法：函数声名</h3><p>在一个函数声名式中，const可以和函数返回值，参数，函数自身（成员函数）发生关系</p>
<h4 id="作用于参数"><a href="#作用于参数" class="headerlink" title="作用于参数"></a>作用于参数</h4><p>1，const参数类似于local const对象，参数不可修改<br>2，除非需要改动参数，否则应该声名为const</p>
<h4 id="作用于返回值"><a href="#作用于返回值" class="headerlink" title="作用于返回值"></a>作用于返回值</h4><p>预防“没有意义的赋值操作”，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">(a * b) = c;    <span class="comment">//在a * b的结果上调用operator=</span></span><br></pre></td></tr></table></figure>
<h4 id="作用于成员函数（const成员函数）"><a href="#作用于成员函数（const成员函数）" class="headerlink" title="作用于成员函数（const成员函数）"></a>作用于成员函数（const成员函数）</h4><p>目的是确认改成员函数可作用于const对象身上</p>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>条款01：视C++为一个语言联邦</title>
    <url>/2020/05/Effective-C++/Effective-CPP-01/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天的C++已经是个多重泛型编程语言，支持面向过程、面向对象、函数编程、泛型、元编程等。可以将C++看成一个由相关语言组成的联邦而非单一语言。</p>
<h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>1，C++以C语言为基础，区块（blocks）、语句（statements）、预处理器（preprocesser）、内置数据类型（build-in data types）、数组（arrays）、指针（pointers）等都来自于C语言。<br>2，但是C语言没有模板（templates），没有异常（exceptions），没有重载（overloading）等概念。</p>
<h4 id="Object——Oriented-C"><a href="#Object——Oriented-C" class="headerlink" title="Object——Oriented C++"></a>Object——Oriented C++</h4><p>即C++的面向对象部分，C with Classes的诉求：类（classes）、封装（encapsulation）、继承（inheritance）、多态（polymorphism）、虚函数（virtual动态绑定）。</p>
<h4 id="Template-C"><a href="#Template-C" class="headerlink" title="Template C++"></a>Template C++</h4><p>C++的泛型编程部分。带来了新的编程范型，template metaprogramming（TMP，模板元编程）</p>
<h4 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h4><p>STL是标准模板库，template库。内置容器（containers）、迭代器（iterators）、算法（algorithm）、函数对象（function objects）</p>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>条款02：尽量以const，enum，inline替换#define</title>
    <url>/2020/05/Effective-C++/Effective-CPP-02/</url>
    <content><![CDATA[<p><strong>用编译器替换预处理器</strong></p>
<h4 id="define的问题：定义常量"><a href="#define的问题：定义常量" class="headerlink" title="define的问题：定义常量"></a>define的问题：定义常量</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ASPECT_RATIO 1.653</span></span><br></pre></td></tr></table></figure>
<p>1，难以追踪异常<br>2，无法限制作用域，不提供封装性</p>
<p>解决办法是：<strong>用const常量替代宏（#define）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> AspectRatio = <span class="number">1.653</span>；</span><br></pre></td></tr></table></figure>
<p>(ps：大写名称通常用于宏)</p>
<h5 id="两种特殊情况"><a href="#两种特殊情况" class="headerlink" title="两种特殊情况"></a>两种特殊情况</h5><h6 id="定义常量指针"><a href="#定义常量指针" class="headerlink" title="定义常量指针"></a>定义常量指针</h6><p>常量定义通常被定义在头文件中，有必要将指针（而不是指针所指之物）声名为const<br>例如定义一个常量字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> authorName = <span class="string">"Scott Meyers"</span>;</span><br></pre></td></tr></table></figure>
<p>一种更好的方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">authorName</span><span class="params">(<span class="string">"Scott Meyers"</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h6 id="定义class专属常量（限制作用域）"><a href="#定义class专属常量（限制作用域）" class="headerlink" title="定义class专属常量（限制作用域）"></a>定义class专属常量（限制作用域）</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> NumTurns;  <span class="comment">//声名式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> GamePlayer::NUmTurns = <span class="number">5</span>;   <span class="comment">//定义式</span></span><br></pre></td></tr></table></figure>
<p>（ps：只要不取NumTurns的地址，则无需提供定义式，即声名时便赋予初值）<br><strong>另一种方式：使用枚举类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">enum</span> &#123; NumTurns = <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> scores[NumTurns];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>认识 enum hack：<br>1，更像#define：不能取enum和#define的地址，避免非必要的内存分配<br>2，模板元变成的基础技术</p>
<h4 id="define的问题：宏表达式"><a href="#define的问题：宏表达式" class="headerlink" title="define的问题：宏表达式"></a>define的问题：宏表达式</h4><p>宏表达式的样子像函数，但是由于会被替换成实际代码，行为和函数也不同，容易造成错误</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用a和b中的较大者为参数来调用f()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))</span></span><br></pre></td></tr></table></figure>
<p><strong>使用inline替换：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;Type T&gt;      <span class="comment">//不清楚a和b的类型</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWIthMax</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span></span>&#123;</span><br><span class="line">  f(a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有了const、enum、inline，降低了对预处理器（尤其是#define）的需求，但是#include仍然是必须的，#ifdef/#ifndef也用于控制编译<br><strong>请记住：</strong></p>
<ul>
<li>对于常量，最好以const对象或者enum替换#define</li>
<li>对于形似函数的宏，最好用inline函数替换#define</li>
</ul>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>常见10种排序算法</title>
    <url>/2020/06/%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%A7%8110%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="常见的排序算法可以分成两类"><a href="#常见的排序算法可以分成两类" class="headerlink" title="常见的排序算法可以分成两类"></a>常见的排序算法可以分成两类</h2><h3 id="非线性时间-比较类排序"><a href="#非线性时间-比较类排序" class="headerlink" title="非线性时间 比较类排序"></a>非线性时间 比较类排序</h3><p>1，通过<strong>比较</strong>来决定元素间的相对次序<br>2，其时间复杂度不能突破O(nlogn)</p>
<h3 id="线性时间-非比较类排序"><a href="#线性时间-非比较类排序" class="headerlink" title="线性时间 非比较类排序"></a>线性时间 非比较类排序</h3><p>1，不通过比较来决定元素间的相对次序<br>2，可以突破基于比较排序的时间下界，以线性时间运行、</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>思路：</strong><br>外层循环从1到n-1（一共n-1趟），内层循环从当前外层元素的下一个位置开始，依次和下一个元素比较，出现逆序就交换，把相邻元素的较小者交换到前面。看起来就像每趟最大的元素依次交换，移动到最后（冒泡）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//外层循环控制排序趟数，共n-1趟</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="comment">//内层循环控制每一趟排序次数</span></span><br><span class="line">		<span class="comment">//最末尾的i个已经被排好了,所以j的范围是0到size-1-i</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span> - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">std</span>::swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化：</strong><br>1，冒泡排序在数据元素<strong>基本有序</strong>的时候性能很好，只要在一次遍历过程中发现数组有序，就可以立即结束<br>2，加入<strong>swap标志</strong>，当前一轮没有进行交换的时候，说明数组已经有序，下一轮可以直接break。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//外层循环控制排序趟数，共n-1趟</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">bool</span> swap = <span class="literal">false</span>;</span><br><span class="line">		<span class="comment">//内层循环控制每一趟排序次数</span></span><br><span class="line">		<span class="comment">//最末尾的i个已经被排好了,所以j的范围是0到size-1-i</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span> - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">std</span>::swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">				swap = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!swap) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序动态图"></p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>思路：</strong><br>在未排序序列种找到最小者，存放到排序序列的末尾位置，以此类推，直到所有的元素均排序完毕</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">min</span> = i;</span><br><span class="line">		<span class="comment">//已排序序列0到i，未排序序列i到size-1</span></span><br><span class="line">		<span class="comment">//找到未排序序列的最小元素arr[min]</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="built_in">size</span>; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &lt; arr[<span class="built_in">min</span>]) &#123;</span><br><span class="line">				<span class="built_in">min</span> = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将找到的最小元素放到已排序序列的末尾</span></span><br><span class="line">		<span class="built_in">std</span>::swap(arr[<span class="built_in">min</span>], arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序动态图"></p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>思路：</strong><br>对于未排序序列中的一个元素，在已排序序列种从后向前扫描，找到相应的位置插入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//一开始的已排序序列0，未排序序列1到n-1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="comment">//当前未排序序列的一个元素</span></span><br><span class="line">		<span class="keyword">int</span> key = arr[i];</span><br><span class="line">		<span class="comment">//已排序序列的末尾位置</span></span><br><span class="line">		<span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">			arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">			--j;<span class="comment">//向前移动</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//插入到相应位置</span></span><br><span class="line">		arr[j + <span class="number">1</span>] = key;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序动态图"></p>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><strong>思路：</strong><br>1，希尔排序是插入排序的一种高效实现，也叫缩小增量排序<br>2，将待排序的序列分割成若干个子序列（间隔）分别进行插入排序，当整个序列基本有序的时候再对全体进行一次插入排序<br>3，增量序列的取法：最后一步必须是1（整体插入排序）。可以取size/2或其他</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义间隔序列</span></span><br><span class="line">	<span class="keyword">while</span> (gap &lt; <span class="built_in">size</span> / <span class="number">2</span>) &#123;</span><br><span class="line">		gap = <span class="number">2</span> * gap;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//这里是间隔的插入排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= gap &amp;&amp; (arr[j] &lt; arr[j - gap]); j -= gap) &#123;</span><br><span class="line">				<span class="built_in">std</span>::swap(arr[j], arr[j - gap]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		gap /= <span class="number">2</span>;	<span class="comment">//更新间隔数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="希尔排序动态图"></p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>思路：</strong><br>分治思想：先使得每个子序列有序，再将子序列两两有序合并<br>1，分解（Divide）：将n个元素对半分成两个子序列<br>2，解决（Conquer）：将两个子序列分别排序<br>3，合并（Combine）：合并两个已经排好序的子序列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*归并排序——递归版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive_helper</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span>* help, <span class="keyword">const</span> <span class="keyword">int</span> start, <span class="keyword">const</span>  <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (start &gt;= <span class="built_in">end</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*以下是数组分割*/</span></span><br><span class="line">	<span class="keyword">int</span> mid = ((<span class="built_in">end</span> - start) &gt;&gt; <span class="number">1</span>) + start;		<span class="comment">//找到中间点</span></span><br><span class="line">	<span class="comment">//将原数组拆分成两段</span></span><br><span class="line">	<span class="keyword">int</span> start1 = start, end1 = mid;</span><br><span class="line">	<span class="keyword">int</span> start2 = mid + <span class="number">1</span>, end2 = <span class="built_in">end</span>;</span><br><span class="line">	merge_sort_recursive_helper(arr, help, start1, end1);</span><br><span class="line">	merge_sort_recursive_helper(arr, help, start2, end2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*以下是排序合并*/</span></span><br><span class="line">	<span class="keyword">int</span> k = start;</span><br><span class="line">	<span class="comment">//将两段合并，直到一段用完</span></span><br><span class="line">	<span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class="line">		help[k++] = (arr[start1] &lt; arr[start2]) ? arr[start1++] : arr[start2++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将没用完的一段直接接在末尾</span></span><br><span class="line">	<span class="keyword">while</span> (start1 &lt;= end1) help[k++] = arr[start1++];</span><br><span class="line">	<span class="keyword">while</span> (start2 &lt;= end2) help[k++] = arr[start2++];</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*将辅助数组种的元素复制到原来的数组*/</span></span><br><span class="line">	<span class="keyword">for</span> (k = start; k &lt;= <span class="built_in">end</span>; ++k) &#123;</span><br><span class="line">		arr[k] = help[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span>  <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//辅助数组，用来存放排序的结果</span></span><br><span class="line">	<span class="keyword">int</span>* help = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">	merge_sort_recursive_helper(arr, help, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*归并排序——迭代版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_iteration</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* help = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>]();</span><br><span class="line">	<span class="keyword">int</span>* a = arr;</span><br><span class="line">	<span class="comment">//片段长度block = 1,2,4,8....</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> block = <span class="number">1</span>; block &lt; <span class="built_in">size</span>; block *= <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="comment">//两两遍历片段</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start &lt; <span class="built_in">size</span>; start += (block * <span class="number">2</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> low = start;</span><br><span class="line">			<span class="comment">//取start+block和size种的较小者，防止越界,high同理</span></span><br><span class="line">			<span class="keyword">int</span> mid = (start + block) &gt; <span class="built_in">size</span> ? <span class="built_in">size</span> : (start + block);</span><br><span class="line">			<span class="keyword">int</span> high = (start + block * <span class="number">2</span>) &gt; <span class="built_in">size</span> ? <span class="built_in">size</span> : (start + block * <span class="number">2</span>);</span><br><span class="line">			<span class="comment">//分成两段，两段的起始和结束下标</span></span><br><span class="line">			<span class="keyword">int</span> start1 = low, end1 = mid;</span><br><span class="line">			<span class="keyword">int</span> start2 = mid, end2 = high;</span><br><span class="line">			<span class="keyword">int</span> k = low;</span><br><span class="line">			<span class="comment">//将两段合并，直到一段用完</span></span><br><span class="line">			<span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2) &#123;</span><br><span class="line">				help[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将没用完的一段直接接在末尾</span></span><br><span class="line">			<span class="keyword">while</span> (start1 &lt; end1) help[k++] = a[start1++];</span><br><span class="line">			<span class="keyword">while</span> (start2 &lt; end2) help[k++] = a[start2++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//交换a和help指针</span></span><br><span class="line">		<span class="keyword">int</span>* temp = a;</span><br><span class="line">		a = help;</span><br><span class="line">		help = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		当size是偶数的时候，help和a最后结果指向不变</span></span><br><span class="line"><span class="comment">		当size是奇数的时候，help和a最后指向相反</span></span><br><span class="line"><span class="comment">		最终help中存储的是排好的序列，要将help中的序列复制到原来的arr中</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">			help[i] = a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		help = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发散思维：</strong><br>1，虽然渐近复杂度和快排一样，但是归并排序的系数更大<br>2，对归并排序的改进：在分割成小数组的时候，改用插入排序<br><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="归并排序动态图"></p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>思路：</strong><br>1，从数组中挑选一个<strong>基准元素</strong><br>2，重新排列数组，所有比基准值小的元素都放在基准元素的前面，所有比基准大的数都放在基准元素后面<br>3，递归的将两个子序列重新排列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*快速排序——递归版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort_recursive_partition</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot = arr[low];	<span class="comment">//基准元素取子序列的第一个元素</span></span><br><span class="line">	<span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="comment">//找到一个比基准元素大的元素，和基准元素进行交换</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) --high;</span><br><span class="line">		arr[low] = arr[high];</span><br><span class="line">		<span class="comment">//找到一个比基准元素小的元素，和基准元素进行交换</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) ++low;</span><br><span class="line">		arr[high] = arr[low];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//扫描结束，恢复基准元素的位置</span></span><br><span class="line">	arr[low] = pivot;</span><br><span class="line">	<span class="comment">//返回基准元素的位置</span></span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive_helper</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> low, <span class="keyword">const</span> <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//将数组分成两部分</span></span><br><span class="line">	<span class="keyword">int</span> pivot = quick_sort_recursive_partition(arr, low, high);</span><br><span class="line">	<span class="comment">//递归排序左右子数组</span></span><br><span class="line">	quick_sort_recursive_helper(arr, low, pivot - <span class="number">1</span>);</span><br><span class="line">	quick_sort_recursive_helper(arr, pivot + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	quick_sort_recursive_helper(arr, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序动态图"></p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><strong>思路：</strong><br>1，堆是树形结构的一种，可以根据待排序的元素俩构建一棵小根堆，那么小根堆的根节点就是序列中最小的元素<br>2，如果我们要获取一个升序序列，建立一个小根堆，每次输出根节点，但是这样需要开辟额外的空间（否则将造成大量元素移动），为了处理这个问题，我们可以选择建立一个大根堆，然后倒序输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust_heap</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> cur, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//调整为最大堆,cur为待调整结点</span></span><br><span class="line">	<span class="comment">//cur的左孩子</span></span><br><span class="line">	<span class="keyword">int</span> child = <span class="number">2</span> * cur + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (child &lt; <span class="built_in">size</span>) &#123;</span><br><span class="line">		<span class="comment">//child + 1是当前结点cur的右孩子</span></span><br><span class="line">		<span class="comment">//如果有右孩子而且大于左孩子，则用右孩子来与cur比较，否则用左孩子</span></span><br><span class="line">		<span class="keyword">if</span> ((child + <span class="number">1</span>) &lt; <span class="built_in">size</span> &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>]) child++;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//若较大的孩子比当前结点cur大</span></span><br><span class="line">		<span class="keyword">if</span> (arr[cur] &lt; arr[child]) &#123;</span><br><span class="line">			<span class="comment">//交换孩子结点和父节点</span></span><br><span class="line">			<span class="built_in">std</span>::swap(arr[cur], arr[child]);</span><br><span class="line">			<span class="comment">//此时child指向的是原来的父结点</span></span><br><span class="line">			<span class="comment">//继续判断原来的父结点是否需要继续调整</span></span><br><span class="line">			cur = child;</span><br><span class="line">			child = <span class="number">2</span> * child + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//待调整结点小于其左右孩子，不用调整，直接结束</span></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//建堆: 最后一个非叶子结点的位置是i = (size - 1) / 2，从它开始依次向上调整</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="built_in">size</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		adjust_heap(arr, i, <span class="built_in">size</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将大根堆反向输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(arr[i], arr[<span class="number">0</span>]);</span><br><span class="line">		adjust_heap(arr, <span class="number">0</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="堆排序动态图"></p>
<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p><strong>思路：</strong><br>前提要求：输入的数据必须是有<strong>确定范围</strong>的整数<br>1，找出待排序数组中最大的和最小的元素<br>2，统计数组中值为i的元素出现的次数，存储在help[i]<br>3，对计数数组进行累加help[i] += help[i - 1];<br>4，反向填充目标数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">min</span> = arr[<span class="number">0</span>], <span class="built_in">max</span> = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">//寻找最大值max和最小值min</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">min</span> &gt; arr[i]) <span class="built_in">min</span> = arr[i];</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">max</span> &lt; arr[i]) <span class="built_in">max</span> = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//用于计数的数组,初始元素都是0</span></span><br><span class="line">	<span class="keyword">int</span>* help = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="built_in">std</span>::<span class="keyword">size_t</span>)<span class="built_in">max</span> - <span class="built_in">min</span> + <span class="number">1</span>]();</span><br><span class="line">	<span class="comment">//计算数组中每个元素i出现的次数，存储到help【i】中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		help[arr[i] - <span class="built_in">min</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//计算数组中小于等于每个元素的个数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span> + <span class="number">1</span>; i &lt;= <span class="built_in">max</span>; ++i) &#123;</span><br><span class="line">		help[i - <span class="built_in">min</span>] = help[i - <span class="built_in">min</span>] + help[i - <span class="number">1</span> - <span class="built_in">min</span>];;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将排序结果存放在result中</span></span><br><span class="line">	<span class="keyword">int</span>* res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		res[help[arr[i] - <span class="built_in">min</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">		--help[arr[i] - <span class="built_in">min</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将res数组里的元素复制到arr数组中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		arr[i] = res[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] res;</span><br><span class="line">	<span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="计数排序动态图"></p>
<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p><strong>思路：</strong><br>1，原理是将数组分散到数量有限的箱子里，然后对每个桶再排序，最后将各个桶中的数据有序的合并起来。<br>2，计数排序是桶排序的一种特殊情况，每个桶中只有一个元素</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客实用技巧</title>
    <url>/2020/05/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="Hexo免密部署到Github"><a href="#Hexo免密部署到Github" class="headerlink" title="Hexo免密部署到Github"></a>Hexo免密部署到Github</h3><p>1，新建系统环境变量</p>
<pre><code>Home
%USERPROFILE%</code></pre><p>2，在用户目录(C:\Users\username)下新建_netrc.txt文件，在文件中输入：</p>
<pre><code>machine github.com
login username
password password</code></pre><h3 id="添加分类功能"><a href="#添加分类功能" class="headerlink" title="添加分类功能"></a>添加分类功能</h3><p>1，在博客的根目录下执行以下命令</p>
<pre><code>hexo new page categories</code></pre><p>该命令会在source文件夹下生成一个categories文件夹，categories文件夹下会有index.md这个文件。<br>2，在index.md下添加type: categories，添加后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: <span class="number">2019</span><span class="number">-04</span><span class="number">-24</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">30</span></span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这里的title是HTML页面的title，可修改成自己想要的<br>3，在编辑新的markdown文件时，需要给文章添加categories属性，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-26</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">57</span></span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>（ps：一篇文章只会有一个分类，默认是第一个）</p>
<h3 id="添加标签功能"><a href="#添加标签功能" class="headerlink" title="添加标签功能"></a>添加标签功能</h3><p>1，在博客的根目录下执行以下命令</p>
<pre><code>hexo new page tags</code></pre><p>该命令会在source文件夹下生成一个tags文件夹，tags文件夹下会有index.md这个文件。<br>2，在index.md下添加type: tags，添加后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span><span class="number">-04</span><span class="number">-24</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">30</span></span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>3，在编辑新的markdown文件时，需要给文章添加tags属性，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-26</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">57</span></span><br><span class="line">categories: </span><br><span class="line">        - Hexo</span><br><span class="line">tags：</span><br><span class="line">        - 博客技巧</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>（ps：一篇文章可以有多个标签）</p>
<h3 id="修改内容区域宽度"><a href="#修改内容区域宽度" class="headerlink" title="修改内容区域宽度"></a>修改内容区域宽度</h3><p>next主题默认的宽带有点窄，留白太多，文章宽度不够<br>打开/Hexo/themes/hexo-theme-next/source//css/_variables/custom.styl 添加两行代码即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$main-desktop = <span class="number">1200</span>px </span><br><span class="line">$content-desktop = <span class="number">900</span>px</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>博客技巧</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
