<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>条款03：尽可能使用const</title>
    <url>/2020/06/Effective-C++/Effective-CPP-03/</url>
    <content><![CDATA[<h3 id="const的作用"><a href="#const的作用" class="headerlink" title="const的作用"></a>const的作用</h3><p>1，告诉编译器和其他程序员某值应该保持不变<br>2，会获得编译器的帮助提示</p>
<h3 id="const的语法：常量声名"><a href="#const的语法：常量声名" class="headerlink" title="const的语法：常量声名"></a>const的语法：常量声名</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> greeting[] = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure>
<p>1，如果const出现在*****的左边，表示被指物是常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting;   <span class="comment">//不可以修改*p，可以修改p</span></span><br></pre></td></tr></table></figure>
<p>2，如果const出现在*****的右边，表示指针自身是常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;   <span class="comment">//可以修改*p，不可以修改p</span></span><br></pre></td></tr></table></figure>
<p>3，如果const出现在*****两边，表示被指物和指针都是常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;   <span class="comment">//不可以修改*p，不可以修改p</span></span><br></pre></td></tr></table></figure>
<h3 id="const的语法：函数声名"><a href="#const的语法：函数声名" class="headerlink" title="const的语法：函数声名"></a>const的语法：函数声名</h3><p>在一个函数声名式中，const可以和函数返回值，参数，函数自身（成员函数）发生关系</p>
<h4 id="作用于参数"><a href="#作用于参数" class="headerlink" title="作用于参数"></a>作用于参数</h4><p>1，const参数类似于local const对象，参数不可修改<br>2，除非需要改动参数，否则应该声名为const</p>
<h4 id="作用于返回值"><a href="#作用于返回值" class="headerlink" title="作用于返回值"></a>作用于返回值</h4><p>预防“没有意义的赋值操作”，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">(a * b) = c;    <span class="comment">//在a * b的结果上调用operator=</span></span><br></pre></td></tr></table></figure>
<h4 id="作用于成员函数（const成员函数）"><a href="#作用于成员函数（const成员函数）" class="headerlink" title="作用于成员函数（const成员函数）"></a>作用于成员函数（const成员函数）</h4><p>目的是确认改成员函数可作用于const对象身上</p>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity游戏热更新-2</title>
    <url>/2020/07/unity/Unity%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0-2/</url>
    <content><![CDATA[<h2 id="为什么大家都用Lua而不是ILRuntime呢？"><a href="#为什么大家都用Lua而不是ILRuntime呢？" class="headerlink" title="为什么大家都用Lua而不是ILRuntime呢？"></a>为什么大家都用Lua而不是ILRuntime呢？</h2><p>1，ILRuntime相对于Lua来说还是个新东西，Lua更加成熟<br>2，很多公司都已经有一套成熟的Lua热更新框架了，没有动力使用ILRuntime<br>（Lua热更新是WOW带起来的）</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity  热更新</tag>
      </tags>
  </entry>
  <entry>
    <title>条款02：尽量以const，enum，inline替换#define</title>
    <url>/2020/05/Effective-C++/Effective-CPP-02/</url>
    <content><![CDATA[<p><strong>用编译器替换预处理器</strong></p>
<h4 id="define的问题：定义常量"><a href="#define的问题：定义常量" class="headerlink" title="define的问题：定义常量"></a>define的问题：定义常量</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ASPECT_RATIO 1.653</span></span><br></pre></td></tr></table></figure>
<p>1，难以追踪异常<br>2，无法限制作用域，不提供封装性</p>
<p>解决办法是：<strong>用const常量替代宏（#define）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> AspectRatio = <span class="number">1.653</span>；</span><br></pre></td></tr></table></figure>
<p>(ps：大写名称通常用于宏)</p>
<h5 id="两种特殊情况"><a href="#两种特殊情况" class="headerlink" title="两种特殊情况"></a>两种特殊情况</h5><h6 id="定义常量指针"><a href="#定义常量指针" class="headerlink" title="定义常量指针"></a>定义常量指针</h6><p>常量定义通常被定义在头文件中，有必要将指针（而不是指针所指之物）声名为const<br>例如定义一个常量字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> authorName = <span class="string">"Scott Meyers"</span>;</span><br></pre></td></tr></table></figure>
<p>一种更好的方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">authorName</span><span class="params">(<span class="string">"Scott Meyers"</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h6 id="定义class专属常量（限制作用域）"><a href="#定义class专属常量（限制作用域）" class="headerlink" title="定义class专属常量（限制作用域）"></a>定义class专属常量（限制作用域）</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> NumTurns;  <span class="comment">//声名式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> GamePlayer::NUmTurns = <span class="number">5</span>;   <span class="comment">//定义式</span></span><br></pre></td></tr></table></figure>
<p>（ps：只要不取NumTurns的地址，则无需提供定义式，即声名时便赋予初值）<br><strong>另一种方式：使用枚举类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">enum</span> &#123; NumTurns = <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> scores[NumTurns];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>认识 enum hack：<br>1，更像#define：不能取enum和#define的地址，避免非必要的内存分配<br>2，模板元变成的基础技术</p>
<h4 id="define的问题：宏表达式"><a href="#define的问题：宏表达式" class="headerlink" title="define的问题：宏表达式"></a>define的问题：宏表达式</h4><p>宏表达式的样子像函数，但是由于会被替换成实际代码，行为和函数也不同，容易造成错误</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用a和b中的较大者为参数来调用f()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))</span></span><br></pre></td></tr></table></figure>
<p><strong>使用inline替换：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;Type T&gt;      <span class="comment">//不清楚a和b的类型</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWIthMax</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span></span>&#123;</span><br><span class="line">  f(a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有了const、enum、inline，降低了对预处理器（尤其是#define）的需求，但是#include仍然是必须的，#ifdef/#ifndef也用于控制编译<br><strong>请记住：</strong></p>
<ul>
<li>对于常量，最好以const对象或者enum替换#define</li>
<li>对于形似函数的宏，最好用inline函数替换#define</li>
</ul>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>条款01：视C++为一个语言联邦</title>
    <url>/2020/05/Effective-C++/Effective-CPP-01/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天的C++已经是个多重泛型编程语言，支持面向过程、面向对象、函数编程、泛型、元编程等。可以将C++看成一个由相关语言组成的联邦而非单一语言。</p>
<h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>1，C++以C语言为基础，区块（blocks）、语句（statements）、预处理器（preprocesser）、内置数据类型（build-in data types）、数组（arrays）、指针（pointers）等都来自于C语言。<br>2，但是C语言没有模板（templates），没有异常（exceptions），没有重载（overloading）等概念。</p>
<h4 id="Object——Oriented-C"><a href="#Object——Oriented-C" class="headerlink" title="Object——Oriented C++"></a>Object——Oriented C++</h4><p>即C++的面向对象部分，C with Classes的诉求：类（classes）、封装（encapsulation）、继承（inheritance）、多态（polymorphism）、虚函数（virtual动态绑定）。</p>
<h4 id="Template-C"><a href="#Template-C" class="headerlink" title="Template C++"></a>Template C++</h4><p>C++的泛型编程部分。带来了新的编程范型，template metaprogramming（TMP，模板元编程）</p>
<h4 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h4><p>STL是标准模板库，template库。内置容器（containers）、迭代器（iterators）、算法（algorithm）、函数对象（function objects）</p>
]]></content>
      <categories>
        <category>Effective C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>常见10种排序算法</title>
    <url>/2020/06/%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%A7%8110%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="常见的排序算法可以分成两类"><a href="#常见的排序算法可以分成两类" class="headerlink" title="常见的排序算法可以分成两类"></a>常见的排序算法可以分成两类</h2><h3 id="非线性时间-比较类排序"><a href="#非线性时间-比较类排序" class="headerlink" title="非线性时间 比较类排序"></a>非线性时间 比较类排序</h3><p>1，通过<strong>比较</strong>来决定元素间的相对次序<br>2，其时间复杂度不能突破O(nlogn)</p>
<h3 id="线性时间-非比较类排序"><a href="#线性时间-非比较类排序" class="headerlink" title="线性时间 非比较类排序"></a>线性时间 非比较类排序</h3><p>1，不通过比较来决定元素间的相对次序<br>2，可以突破基于比较排序的时间下界，以线性时间运行<br><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%B1%BB.png" alt="排序算法的分类"></p>
<h2 id="非线性时间比较类"><a href="#非线性时间比较类" class="headerlink" title="非线性时间比较类"></a>非线性时间比较类</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>思路：</strong><br>外层循环从1到n-1（一共n-1趟），内层循环从当前外层元素的下一个位置开始，依次和下一个元素比较，出现逆序就交换，把相邻元素的较小者交换到前面。看起来就像每趟最大的元素依次交换，移动到最后（冒泡）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//外层循环控制排序趟数，共n-1趟</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="comment">//内层循环控制每一趟排序次数</span></span><br><span class="line">		<span class="comment">//最末尾的i个已经被排好了,所以j的范围是0到size-1-i</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span> - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">std</span>::swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化：</strong><br>1，冒泡排序在数据元素<strong>基本有序</strong>的时候性能很好，只要在一次遍历过程中发现数组有序，就可以立即结束<br>2，加入<strong>swap标志</strong>，当前一轮没有进行交换的时候，说明数组已经有序，下一轮可以直接break。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//外层循环控制排序趟数，共n-1趟</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">bool</span> swap = <span class="literal">false</span>;</span><br><span class="line">		<span class="comment">//内层循环控制每一趟排序次数</span></span><br><span class="line">		<span class="comment">//最末尾的i个已经被排好了,所以j的范围是0到size-1-i</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span> - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">std</span>::swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">				swap = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!swap) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序动态图"><br><strong>特点：</strong><br>1，冒泡排序是<strong>稳定</strong>的排序算法<br>2，思路和实现都很简单，适合小数组排序<br>3，算法复杂度较高，不适合数据规模较大时使用</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>思路：</strong><br>在<strong>未排序序列种找到最小者</strong>，存放到排序序列的末尾位置，以此类推，直到所有的元素均排序完毕</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">min</span> = i;</span><br><span class="line">		<span class="comment">//已排序序列0到i，未排序序列i到size-1</span></span><br><span class="line">		<span class="comment">//找到未排序序列的最小元素arr[min]</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="built_in">size</span>; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &lt; arr[<span class="built_in">min</span>]) &#123;</span><br><span class="line">				<span class="built_in">min</span> = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将找到的最小元素放到已排序序列的末尾</span></span><br><span class="line">		<span class="built_in">std</span>::swap(arr[<span class="built_in">min</span>], arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序动态图"><br><strong>特点：</strong><br>1，数组实现的选择排序是<strong>不稳定</strong>的，链表实现的选择排序是稳定的<br>2，思路和实现比较简单<br>3，复杂度波动小，优于冒泡排序<br>4，复杂度较高，只适合小规模数组排序</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>思路：</strong><br>1，对于未排序序列中的一个元素，在已排序序列种从后向前扫描，找到相应的位置插入<br>2，类似于扑克牌摸牌，手牌都是已排序的，牌堆都是未排序的。摸一张牌，找到合适的位置插入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//一开始的已排序序列0，未排序序列1到n-1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="comment">//当前未排序序列的一个元素</span></span><br><span class="line">		<span class="keyword">int</span> key = arr[i];</span><br><span class="line">		<span class="comment">//已排序序列的末尾位置</span></span><br><span class="line">		<span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">			arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">			--j;<span class="comment">//向前移动</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//插入到相应位置</span></span><br><span class="line">		arr[j + <span class="number">1</span>] = key;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序动态图"><br><strong>特点：</strong><br>1，插入排序是<strong>稳定</strong>的排序算法<br>2，复杂度较高，不适合大规模数组<br>3，一般作为<strong>快速排序的补充</strong>如：<br>STL中的sort和stdlib中的qsort算法，会将插入排序作为快速排序的补充<br>JDK 7中Arrays中的sort，会在数组长度小于47的时候，使用插入排序</p>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><strong>思路：</strong><br>1，希尔排序是插入排序的一种高效实现，也叫缩小增量排序<br>2，将待排序的序列分割成若干个子序列（间隔）分别进行插入排序，当整个序列基本有序的时候再对全体进行一次插入排序<br>3，增量序列的取法：最后一步必须是1（整体插入排序）。可以取size/2或其他</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义间隔序列</span></span><br><span class="line">	<span class="keyword">while</span> (gap &lt; <span class="built_in">size</span> / <span class="number">2</span>) &#123;</span><br><span class="line">		gap = <span class="number">2</span> * gap;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//这里是间隔的插入排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= gap &amp;&amp; (arr[j] &lt; arr[j - gap]); j -= gap) &#123;</span><br><span class="line">				<span class="built_in">std</span>::swap(arr[j], arr[j - gap]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		gap /= <span class="number">2</span>;	<span class="comment">//更新间隔数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="希尔排序动态图"><br><strong>特点：</strong><br>1，在希尔排序出现之前，计算机界普遍认为排序算法不可能突破O（n2），希尔排序是第一个突破O（n2）的算法<br>2，插入排序是稳定的排序算法，希尔排序是多次插入的过程，它是<strong>不稳定</strong>的<br>3，复杂度依然较高，只适合中小规模</p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>思路：</strong><br>分治思想：先使得每个子序列有序，再将子序列两两有序合并<br>1，分解（Divide）：将n个元素对半分成两个子序列<br>2，解决（Conquer）：将两个子序列分别排序<br>3，合并（Combine）：合并两个已经排好序的子序列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*归并排序——递归版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive_helper</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span>* help, <span class="keyword">const</span> <span class="keyword">int</span> start, <span class="keyword">const</span>  <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (start &gt;= <span class="built_in">end</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*以下是数组分割*/</span></span><br><span class="line">	<span class="keyword">int</span> mid = ((<span class="built_in">end</span> - start) &gt;&gt; <span class="number">1</span>) + start;		<span class="comment">//找到中间点</span></span><br><span class="line">	<span class="comment">//将原数组拆分成两段</span></span><br><span class="line">	<span class="keyword">int</span> start1 = start, end1 = mid;</span><br><span class="line">	<span class="keyword">int</span> start2 = mid + <span class="number">1</span>, end2 = <span class="built_in">end</span>;</span><br><span class="line">	merge_sort_recursive_helper(arr, help, start1, end1);</span><br><span class="line">	merge_sort_recursive_helper(arr, help, start2, end2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*以下是排序合并*/</span></span><br><span class="line">	<span class="keyword">int</span> k = start;</span><br><span class="line">	<span class="comment">//将两段合并，直到一段用完</span></span><br><span class="line">	<span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class="line">		help[k++] = (arr[start1] &lt; arr[start2]) ? arr[start1++] : arr[start2++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将没用完的一段直接接在末尾</span></span><br><span class="line">	<span class="keyword">while</span> (start1 &lt;= end1) help[k++] = arr[start1++];</span><br><span class="line">	<span class="keyword">while</span> (start2 &lt;= end2) help[k++] = arr[start2++];</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*将辅助数组种的元素复制到原来的数组*/</span></span><br><span class="line">	<span class="keyword">for</span> (k = start; k &lt;= <span class="built_in">end</span>; ++k) &#123;</span><br><span class="line">		arr[k] = help[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span>  <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//辅助数组，用来存放排序的结果</span></span><br><span class="line">	<span class="keyword">int</span>* help = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">	merge_sort_recursive_helper(arr, help, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*归并排序——迭代版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_iteration</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* help = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>]();</span><br><span class="line">	<span class="keyword">int</span>* a = arr;</span><br><span class="line">	<span class="comment">//片段长度block = 1,2,4,8....</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> block = <span class="number">1</span>; block &lt; <span class="built_in">size</span>; block *= <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="comment">//两两遍历片段</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start &lt; <span class="built_in">size</span>; start += (block * <span class="number">2</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> low = start;</span><br><span class="line">			<span class="comment">//取start+block和size种的较小者，防止越界,high同理</span></span><br><span class="line">			<span class="keyword">int</span> mid = (start + block) &gt; <span class="built_in">size</span> ? <span class="built_in">size</span> : (start + block);</span><br><span class="line">			<span class="keyword">int</span> high = (start + block * <span class="number">2</span>) &gt; <span class="built_in">size</span> ? <span class="built_in">size</span> : (start + block * <span class="number">2</span>);</span><br><span class="line">			<span class="comment">//分成两段，两段的起始和结束下标</span></span><br><span class="line">			<span class="keyword">int</span> start1 = low, end1 = mid;</span><br><span class="line">			<span class="keyword">int</span> start2 = mid, end2 = high;</span><br><span class="line">			<span class="keyword">int</span> k = low;</span><br><span class="line">			<span class="comment">//将两段合并，直到一段用完</span></span><br><span class="line">			<span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2) &#123;</span><br><span class="line">				help[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将没用完的一段直接接在末尾</span></span><br><span class="line">			<span class="keyword">while</span> (start1 &lt; end1) help[k++] = a[start1++];</span><br><span class="line">			<span class="keyword">while</span> (start2 &lt; end2) help[k++] = a[start2++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//交换a和help指针</span></span><br><span class="line">		<span class="keyword">int</span>* temp = a;</span><br><span class="line">		a = help;</span><br><span class="line">		help = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		当size是偶数的时候，help和a最后结果指向不变</span></span><br><span class="line"><span class="comment">		当size是奇数的时候，help和a最后指向相反</span></span><br><span class="line"><span class="comment">		最终help中存储的是排好的序列，要将help中的序列复制到原来的arr中</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">			help[i] = a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		help = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发散思维：</strong><br>1，虽然渐近复杂度和快排一样，但是归并排序的系数更大<br>2，对归并排序的改进：在分割成小数组的时候，改用插入排序<br><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="归并排序动态图"><br><strong>特点：</strong><br>1，归并排序是<strong>稳定</strong>的排序算法<br>2，时间复杂度小，数据量大的时候速度快，但是它有着<strong>O（n）的空间复杂度</strong>，在内存有限的时候谨慎使用</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>思路：</strong><br>1，从数组中挑选一个<strong>基准元素</strong><br>2，重新排列数组，所有比基准值小的元素都放在基准元素的前面，所有比基准大的数都放在基准元素后面<br>3，递归的将两个子序列重新排列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*迭代和递归均使用*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort_partition</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot = arr[low];	<span class="comment">//基准元素取子序列的第一个元素</span></span><br><span class="line">	<span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="comment">//找到一个比基准元素大的元素，和基准元素进行交换</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) --high;</span><br><span class="line">		arr[low] = arr[high];</span><br><span class="line">		<span class="comment">//找到一个比基准元素小的元素，和基准元素进行交换</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) ++low;</span><br><span class="line">		arr[high] = arr[low];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//扫描结束，恢复基准元素的位置</span></span><br><span class="line">	arr[low] = pivot;</span><br><span class="line">	<span class="comment">//返回基准元素的位置</span></span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*快速排序——递归版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive_helper</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> low, <span class="keyword">const</span> <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//将数组分成两部分</span></span><br><span class="line">	<span class="keyword">int</span> pivot = quick_sort_partition(arr, low, high);</span><br><span class="line">	<span class="comment">//递归排序左右子数组</span></span><br><span class="line">	quick_sort_recursive_helper(arr, low, pivot - <span class="number">1</span>);</span><br><span class="line">	quick_sort_recursive_helper(arr, pivot + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	quick_sort_recursive_helper(arr, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*快速排序——迭代版本*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_iterative</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//栈数组</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">min</span> = <span class="number">0</span>, <span class="built_in">max</span> = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span>* <span class="built_in">stack</span> = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="built_in">std</span>::<span class="keyword">size_t</span>)<span class="built_in">size</span> - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//将最大最小值压入栈</span></span><br><span class="line">	<span class="built_in">stack</span>[++top] = <span class="built_in">min</span>;</span><br><span class="line">	<span class="built_in">stack</span>[++top] = <span class="built_in">max</span>;</span><br><span class="line">	<span class="comment">//开始迭代</span></span><br><span class="line">	<span class="keyword">while</span> (top &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">max</span> = <span class="built_in">stack</span>[top--];</span><br><span class="line">		<span class="built_in">min</span> = <span class="built_in">stack</span>[top--];</span><br><span class="line">		<span class="comment">//将数组分成两部分</span></span><br><span class="line">		<span class="keyword">int</span> pivot = quick_sort_partition(arr, <span class="built_in">min</span>, <span class="built_in">max</span>);</span><br><span class="line">		<span class="comment">//若基准元素左边还有数据元素</span></span><br><span class="line">		<span class="keyword">if</span> (pivot - <span class="number">1</span> &gt; <span class="built_in">min</span>) &#123;</span><br><span class="line">			<span class="built_in">stack</span>[++top] = <span class="built_in">min</span>;</span><br><span class="line">			<span class="built_in">stack</span>[++top] = pivot - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//若基准元素右边还有数据元素</span></span><br><span class="line">		<span class="keyword">if</span> (pivot + <span class="number">1</span> &lt; <span class="built_in">max</span>) &#123;</span><br><span class="line">			<span class="built_in">stack</span>[++top] = pivot + <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">stack</span>[++top] = <span class="built_in">max</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序动态图"></p>
<p><strong>快速排序的优化：</strong><br>为了避免最坏情况下的低效率，可以优化基准元素的选择，将每次选择最低位改成在序列中随机一个元素作为基准元素，只需要修改 quick_sort_partition函数即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*迭代和递归均使用*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort_partition</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//基准元素取子序列的一个随机元素</span></span><br><span class="line">	<span class="keyword">int</span> index = (rand() % (high - low)) + low;</span><br><span class="line">	<span class="keyword">int</span> pivot = arr[index];	</span><br><span class="line">	<span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="comment">//找到一个比基准元素大的元素，和基准元素进行交换</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) --high;</span><br><span class="line">		arr[low] = arr[high];</span><br><span class="line">		<span class="comment">//找到一个比基准元素小的元素，和基准元素进行交换</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) ++low;</span><br><span class="line">		arr[high] = arr[low];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//扫描结束，恢复基准元素的位置</span></span><br><span class="line">	arr[index] = pivot;</span><br><span class="line">	<span class="comment">//返回基准元素的位置</span></span><br><span class="line">	<span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点：</strong><br>1，快排是<strong>不稳定</strong>的排序算法<br>2，大多数情况下表现很好，速度很快O(nlogn)。但是在<strong>最坏情况</strong>下表现一般O（n2）</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><strong>思路：</strong><br>1，堆是树形结构的一种，可以根据待排序的元素俩构建一棵小根堆，那么小根堆的根节点就是序列中最小的元素<br>2，如果我们要获取一个升序序列，建立一个小根堆，每次输出根节点，但是这样需要开辟额外的空间（否则将造成大量元素移动），为了处理这个问题，我们可以选择建立一个大根堆，然后倒序输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust_heap</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> cur, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//调整为最大堆,cur为待调整结点</span></span><br><span class="line">	<span class="comment">//cur的左孩子</span></span><br><span class="line">	<span class="keyword">int</span> child = <span class="number">2</span> * cur + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (child &lt; <span class="built_in">size</span>) &#123;</span><br><span class="line">		<span class="comment">//child + 1是当前结点cur的右孩子</span></span><br><span class="line">		<span class="comment">//如果有右孩子而且大于左孩子，则用右孩子来与cur比较，否则用左孩子</span></span><br><span class="line">		<span class="keyword">if</span> ((child + <span class="number">1</span>) &lt; <span class="built_in">size</span> &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>]) child++;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//若较大的孩子比当前结点cur大</span></span><br><span class="line">		<span class="keyword">if</span> (arr[cur] &lt; arr[child]) &#123;</span><br><span class="line">			<span class="comment">//交换孩子结点和父节点</span></span><br><span class="line">			<span class="built_in">std</span>::swap(arr[cur], arr[child]);</span><br><span class="line">			<span class="comment">//此时child指向的是原来的父结点</span></span><br><span class="line">			<span class="comment">//继续判断原来的父结点是否需要继续调整</span></span><br><span class="line">			cur = child;</span><br><span class="line">			child = <span class="number">2</span> * child + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//待调整结点小于其左右孩子，不用调整，直接结束</span></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//建堆: 最后一个非叶子结点的位置是i = (size - 1) / 2，从它开始依次向上调整</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="built_in">size</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		adjust_heap(arr, i, <span class="built_in">size</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将大根堆反向输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(arr[i], arr[<span class="number">0</span>]);</span><br><span class="line">		adjust_heap(arr, <span class="number">0</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="堆排序动态图"><br><strong>特点：</strong><br>1,建堆和堆的调整开销较高，因此<strong>不适合元素数量少</strong>的时候使用<br>2，适合解决<strong>前n大的数</strong>这种问题</p>
<h2 id="线性时间非比较类"><a href="#线性时间非比较类" class="headerlink" title="线性时间非比较类"></a>线性时间非比较类</h2><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p><strong>思路：</strong><br>前提要求：输入的数据必须是有<strong>确定范围</strong>的整数<br>1，找出待排序数组中最大的和最小的元素<br>2，统计数组中值为i的元素出现的次数，存储在help[i]<br>3，对计数数组进行累加help[i] += help[i - 1];<br>4，反向填充目标数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">min</span> = arr[<span class="number">0</span>], <span class="built_in">max</span> = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">//寻找最大值max和最小值min</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">min</span> &gt; arr[i]) <span class="built_in">min</span> = arr[i];</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">max</span> &lt; arr[i]) <span class="built_in">max</span> = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//count_num = 1，说明数组中的元素全部一样</span></span><br><span class="line">	<span class="keyword">int</span> count_num = <span class="built_in">max</span> - <span class="built_in">min</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (count_num &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//用于计数的数组,初始元素都是0</span></span><br><span class="line">	<span class="keyword">int</span>* help = <span class="keyword">new</span> <span class="keyword">int</span>[count_num]();</span><br><span class="line">	<span class="comment">//计算数组中每个元素i出现的次数，存储到help【i】中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		help[arr[i] - <span class="built_in">min</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//计算数组中小于等于每个元素的个数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span> + <span class="number">1</span>; i &lt;= <span class="built_in">max</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> index = i - <span class="built_in">min</span>;</span><br><span class="line">		help[i - <span class="built_in">min</span>] += help[index - <span class="number">1</span>];;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将排序结果存放在result中</span></span><br><span class="line">	<span class="keyword">int</span>* res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		res[help[arr[i] - <span class="built_in">min</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">		--help[arr[i] - <span class="built_in">min</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将res数组里的元素复制到arr数组中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		arr[i] = res[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] res;</span><br><span class="line">	<span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="计数排序动态图"><br><strong>特点：</strong><br>1，计数排序是<strong>稳定</strong>的排序算法<br>2，<strong>重点：</strong>最大最小值应当容易辨别，比如排序高考成绩，即0-750之间<br>3，计数排序有着O（n）的空间复杂度</p>
<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p><strong>思路：</strong><br>1，原理是将数组分散到数量有限的箱子里，然后对每个桶再排序，最后将各个桶中的数据有序的合并起来。<br>2，计数排序是桶排序的一种特殊情况，每个桶中只有一个元素<br>3，在每个桶里，可以使用其他适用于小规模的原地排序算法，这里用的是前面的插入排序和快速排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">min</span> = arr[<span class="number">0</span>], <span class="built_in">max</span> = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">//寻找最大值max和最小值min</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">min</span> &gt; arr[i]) <span class="built_in">min</span> = arr[i];</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">max</span> &lt; arr[i]) <span class="built_in">max</span> = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//桶的数量</span></span><br><span class="line">	<span class="keyword">int</span> bucket_num = (<span class="built_in">max</span> - <span class="built_in">min</span>) / <span class="built_in">size</span> + <span class="number">1</span>;	</span><br><span class="line">	<span class="comment">//统计每个桶里有多少个元素</span></span><br><span class="line">	<span class="keyword">int</span>* sizeof_each_bucket = <span class="keyword">new</span> <span class="keyword">int</span>[bucket_num]();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> index_bucket = (arr[i] - <span class="built_in">min</span>) / <span class="built_in">size</span>;</span><br><span class="line">		sizeof_each_bucket[index_bucket]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//开辟桶空间</span></span><br><span class="line">	<span class="keyword">int</span>** bucket_arr = <span class="keyword">new</span> <span class="keyword">int</span>* [bucket_num];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket_num; ++i) &#123;</span><br><span class="line">		bucket_arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="built_in">std</span>::<span class="keyword">size_t</span>)sizeof_each_bucket[i] + <span class="number">1</span>]();</span><br><span class="line">		<span class="comment">//第一位存放该桶的size-1</span></span><br><span class="line">		bucket_arr[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将每个元素放入桶中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> index_bucket = (arr[i] - <span class="built_in">min</span>) / <span class="built_in">size</span>;</span><br><span class="line">		<span class="keyword">int</span> cur_bucket_size = bucket_arr[index_bucket][<span class="number">0</span>]++;</span><br><span class="line">		bucket_arr[index_bucket][cur_bucket_size] = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//对每个桶进行排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket_num; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (bucket_arr[i][<span class="number">0</span>] == <span class="number">1</span> || bucket_arr[i][<span class="number">0</span>] == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (bucket_arr[i][<span class="number">0</span>] &lt; <span class="number">47</span>) &#123;</span><br><span class="line">			insertion_sort(bucket_arr[i] + <span class="number">1</span>, bucket_arr[i][<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			quick_sort_iterative(bucket_arr[i] + <span class="number">1</span>, bucket_arr[i][<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将bucket_arr中的元素复制到arr中</span></span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket_num; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; bucket_arr[i][<span class="number">0</span>]; ++j) &#123;</span><br><span class="line">			arr[index++] = bucket_arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放内存</span></span><br><span class="line">	<span class="keyword">delete</span>[] sizeof_each_bucket;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket_num; ++i) &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] bucket_arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] bucket_arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E6%A1%B6%E6%8E%92%E5%BA%8F.jpg" alt="桶排序示意图（没找到动图）"><br><strong>特点：</strong><br>1，桶排序可用于max-min较大的情况<br>2，要求数据分布<strong>较为均匀</strong>，不然可能会集中到一个桶中，这样桶排序就失效了</p>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p><strong>思路：</strong><br>1，基数排序是桶排序的扩展，其基本思想是按找数位来排序（类似于有10个桶）<br>2，从低位开始，元素按数位上的数字（0-9）入桶，然后再将桶内元素收集起来（排序）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max_radix</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*获取数组中的最大数位*/</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">max</span> = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">//先找到最大数字</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i] &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> radix = <span class="number">1</span>, temp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		temp *= <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">max</span> / temp != <span class="number">0</span>) &#123;</span><br><span class="line">			radix++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> radix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> num, <span class="keyword">const</span> <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*获取数字num第pos位数字*/</span></span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		temp *= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (num / temp) % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="literal">NULL</span> || <span class="built_in">size</span> &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//0-9共10个桶</span></span><br><span class="line">	<span class="keyword">int</span>** help = <span class="keyword">new</span> <span class="keyword">int</span>* [<span class="number">10</span>]();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">		help[i] = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="built_in">std</span>::<span class="keyword">size_t</span>)<span class="built_in">size</span> + <span class="number">1</span>]();</span><br><span class="line">		help[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> max_radix = get_max_radix(arr, <span class="built_in">size</span>);</span><br><span class="line">	<span class="comment">//第i位数排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> radix = <span class="number">1</span>; radix &lt;= max_radix; ++radix) &#123;</span><br><span class="line">		<span class="comment">//将数组中的元素，按数位分配到各个桶中</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> row = get_num(arr[i], radix);</span><br><span class="line">			<span class="keyword">int</span> col = help[row][<span class="number">0</span>]++;</span><br><span class="line">			help[row][col] = arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//从各个桶中收集元素</span></span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="number">10</span>; ++row) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt; help[row][<span class="number">0</span>]; ++col) &#123;</span><br><span class="line">				arr[index++] = help[row][col];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//复位，下一个数位继续用</span></span><br><span class="line">			help[row][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] help[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="基数排序动态图"><br><strong>特点：</strong><br>1，元素必须是<strong>整数</strong><br>2，可以适用于<strong>字符串排序</strong><br>3，可以适用于<strong>多条件排序</strong>的场景，比如日期排序，先排年，再排月</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://github.com/Morakito/Blog-Images/raw/sort/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="排序算法的复杂度"><br>0，没有最好的排序，只有最适合的排序<br>1，平均时间来看，快读排序效率最高，但是快速排序在最坏情况下的时间性能不如堆排序和归并排序。<br>2，在数据规模较大时归并排序时间性能较好，但使用额外空间较多<br>3，简单排序：冒泡排序，插入排序，选择排序。插入排序常常和其他排序算法结合使用</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity游戏热更新-1</title>
    <url>/2020/07/unity/Unity%E6%B8%B8%E6%88%8F%E7%83%AD%E6%9B%B4%E6%96%B0-1/</url>
    <content><![CDATA[<h2 id="什么是热更新"><a href="#什么是热更新" class="headerlink" title="什么是热更新"></a>什么是热更新</h2><h3 id="无热更新游戏"><a href="#无热更新游戏" class="headerlink" title="无热更新游戏"></a>无热更新游戏</h3><p>1，没有热更新的游戏在更新游戏资源（贴图，脚本等）的时候，会让用户去应用市场重新下载完整版的游戏安装包。<br>2，更新过程太过繁琐，要到游戏外部下载安装包；而且下载的安装包容量可能很大。可能仅仅是更新几个皮肤，就要用户重新下载游戏。因此热更新还是很重要的。</p>
<h3 id="有热更新游戏"><a href="#有热更新游戏" class="headerlink" title="有热更新游戏"></a>有热更新游戏</h3><p>1，游戏在启动之后，自动进行更新。（类似于王者荣耀，英雄联盟等的更新）<br>2，更新流程：</p>
<blockquote>
<p>（1）玩家下载游戏<br>（2）制作后续的游戏更新<br>（3）将资源<strong>打包上传</strong>到更新服务器<br>（4）玩家在启动游戏的时候自动检测是否有更新<br>（5）自动下载资源包<br>（6）执行热更（因资源类型而异）</p>
</blockquote>
<h3 id="游戏热更新的种类"><a href="#游戏热更新的种类" class="headerlink" title="游戏热更新的种类"></a>游戏热更新的种类</h3><p>1，资源热更新<br>2，代码热更新：平台操作系统的限制，可能将<strong>病毒</strong>藏在热更新中。</p>
<h2 id="热更新与资源管理"><a href="#热更新与资源管理" class="headerlink" title="热更新与资源管理"></a>热更新与资源管理</h2><h3 id="可热更的资源类型"><a href="#可热更的资源类型" class="headerlink" title="可热更的资源类型"></a>可热更的资源类型</h3><blockquote>
<p>预制体 Prefab<br>材质 Material  贴图 Texture  模型 Model<br>场景 Scene<br>着色器 Shader<br>动画 Animation<br>动画机 Animator<br>Unity中除代码资源外的所有资源。</p>
</blockquote>
<h3 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h3><p>1，按照资源（Label）打包（X）<br>2，<strong>按照资源路径打包</strong><br>3，编写打包插件<br>（1）压缩选项：</p>
<blockquote>
<p>不压缩<br>LZ4：基于Block的压缩（将资源分块）<br>LZMA：基于Chunk的压缩（读取资源的头部信息Header，找到Chunk，再找到Block）</p>
</blockquote>
<p>（2）编写版本文件</p>
<blockquote>
<p>将版本文件上传<br><strong>版本号</strong>（客户端的版本号和服务器端的版本号对比）</p>
</blockquote>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>1，上传到<strong>HTTP</strong>或FTP服务器<br>2，开发时：<br>（1）配置一台开发用的资源服务器<br>（2）可以和开发机在同一台机器上</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>1，客户端，服务器各有一份版本文件<br>2，客户端启动时，先下载一份服务器的版本文件<br>3，用服务器版本与客户端版本做对比<br>4，判断游戏资源是否改变：md5编码校验</p>
<h3 id="版本比对"><a href="#版本比对" class="headerlink" title="版本比对"></a>版本比对</h3><h4 id="要比对的点："><a href="#要比对的点：" class="headerlink" title="要比对的点："></a>要比对的点：</h4><p>1，增加项（直接下载）<br>2，减少项（直接删除）<br>3，更新项（和服务器同步）</p>
<h4 id="比对方式"><a href="#比对方式" class="headerlink" title="比对方式"></a>比对方式</h4><p>1，自己实现对比算法<br>2，调用源码管理工具获取结果</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>1，缓存版本比对结果（降低服务器负荷）</p>
<h3 id="解包的依赖关系处理"><a href="#解包的依赖关系处理" class="headerlink" title="解包的依赖关系处理"></a>解包的依赖关系处理</h3><p>1，Unity在打包的时候会自动记录资源依赖的关系（资源清单文件）<br>2，我们在解包的时候需要：</p>
<blockquote>
<p>读取依赖关系<br>先加载所有的依赖项，最后加载资源主体</p>
</blockquote>
<p>（解包 ！= 加载资源 ！= 实例化对象）</p>
<h3 id="资源引用计数"><a href="#资源引用计数" class="headerlink" title="资源引用计数"></a>资源引用计数</h3><p>1，场景中每一个实例化对象会将其引用+1<br>2，当引用计数为0时应当释放资源</p>
<h3 id="代码热更新"><a href="#代码热更新" class="headerlink" title="代码热更新"></a>代码热更新</h3><p>（代码热更新是资源热更新的一个重要特例，将代码以数据的情况隐藏起来欺骗操作系统）</p>
<blockquote>
<p>ILRunTime：C#<br>ToLua/XLua：Lua（祖传代码）</p>
</blockquote>
<h3 id="Addressable"><a href="#Addressable" class="headerlink" title="Addressable"></a>Addressable</h3><p>1，Addressable不是一个新东西，是对AssetBundle的高级包装。支持：</p>
<blockquote>
<p>资源引用计数<br>自动资源寻址<br>远程/本地热更新对开发者透明</p>
</blockquote>
<h2 id="代码热更新-1"><a href="#代码热更新-1" class="headerlink" title="代码热更新"></a>代码热更新</h2><h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><p>1，编写热更新代码<br>2，打包为二进制资源包（Lua）<br>3，和资源更新一样上传，下载，版本对比<br>4，加载更新后的脚本资源（虚拟机）</p>
<h3 id="代码热更新能做什么"><a href="#代码热更新能做什么" class="headerlink" title="代码热更新能做什么"></a>代码热更新能做什么</h3><p>1，配置数据配置（游戏数据） (策划表Excel -&gt; Lua/C#)<br>2，逻辑代码热更新</p>
<h3 id="为什么代码能热更新"><a href="#为什么代码能热更新" class="headerlink" title="为什么代码能热更新"></a>为什么代码能热更新</h3><p>1，虚拟机(Lua虚拟机/.net)<br>2，方式：反射 / 代码绑定</p>
<h3 id="代码热更新插件的功能"><a href="#代码热更新插件的功能" class="headerlink" title="代码热更新插件的功能"></a>代码热更新插件的功能</h3><h4 id="提供了Unity和c-脚本的双向绑定"><a href="#提供了Unity和c-脚本的双向绑定" class="headerlink" title="提供了Unity和c#脚本的双向绑定"></a>提供了Unity和c#脚本的双向绑定</h4><p>1，XLua：补丁式热更<br>2，ToLua：经典热更<br>3，ILRuntime：反射/CRL绑定热更</p>
<h4 id="代码插件不提供什么"><a href="#代码插件不提供什么" class="headerlink" title="代码插件不提供什么"></a>代码插件不提供什么</h4><p>1，热更代码框架</p>
<h4 id="Lua代码热更新框架要实现的功能"><a href="#Lua代码热更新框架要实现的功能" class="headerlink" title="Lua代码热更新框架要实现的功能"></a>Lua代码热更新框架要实现的功能</h4><p>1，一系列方便、可用的工具库<br>2，一个供Unity端调用的基于事件的Lua框架库<br>3，对Lua代码进行保护（外挂，作弊）</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity  热更新</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客实用技巧</title>
    <url>/2020/05/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="Hexo免密部署到Github"><a href="#Hexo免密部署到Github" class="headerlink" title="Hexo免密部署到Github"></a>Hexo免密部署到Github</h3><p>1，新建系统环境变量</p>
<pre><code>Home
%USERPROFILE%</code></pre><p>2，在用户目录(C:\Users\username)下新建_netrc.txt文件，在文件中输入：</p>
<pre><code>machine github.com
login username
password password</code></pre><h3 id="添加分类功能"><a href="#添加分类功能" class="headerlink" title="添加分类功能"></a>添加分类功能</h3><p>1，在博客的根目录下执行以下命令</p>
<pre><code>hexo new page categories</code></pre><p>该命令会在source文件夹下生成一个categories文件夹，categories文件夹下会有index.md这个文件。<br>2，在index.md下添加type: categories，添加后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: <span class="number">2019</span><span class="number">-04</span><span class="number">-24</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">30</span></span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这里的title是HTML页面的title，可修改成自己想要的<br>3，在编辑新的markdown文件时，需要给文章添加categories属性，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-26</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">57</span></span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>（ps：一篇文章只会有一个分类，默认是第一个）</p>
<h3 id="添加标签功能"><a href="#添加标签功能" class="headerlink" title="添加标签功能"></a>添加标签功能</h3><p>1，在博客的根目录下执行以下命令</p>
<pre><code>hexo new page tags</code></pre><p>该命令会在source文件夹下生成一个tags文件夹，tags文件夹下会有index.md这个文件。<br>2，在index.md下添加type: tags，添加后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span><span class="number">-04</span><span class="number">-24</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">30</span></span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>3，在编辑新的markdown文件时，需要给文章添加tags属性，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-26</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">57</span></span><br><span class="line">categories: </span><br><span class="line">        - Hexo</span><br><span class="line">tags：</span><br><span class="line">        - 博客技巧</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>（ps：一篇文章可以有多个标签）</p>
<h3 id="修改内容区域宽度"><a href="#修改内容区域宽度" class="headerlink" title="修改内容区域宽度"></a>修改内容区域宽度</h3><p>next主题默认的宽带有点窄，留白太多，文章宽度不够<br>打开/Hexo/themes/hexo-theme-next/source//css/_variables/custom.styl 添加两行代码即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$main-desktop = <span class="number">1200</span>px </span><br><span class="line">$content-desktop = <span class="number">900</span>px</span><br></pre></td></tr></table></figure>

<h3 id="使用GitHub作为博客图床"><a href="#使用GitHub作为博客图床" class="headerlink" title="使用GitHub作为博客图床"></a>使用GitHub作为博客图床</h3><p>1，新建一个仓库存放图片，为了便于分类和管理，可以放在不同分支下<br>2，将需要使用的图片上传到指定分支下<br>3，复制图片所在页面的URL<br>4，嵌入markdown，<strong>注意:</strong> 需要将链接中的blob修改成raw</p>
]]></content>
      <categories>
        <category>博客技巧</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>【LeetCode】37 - 解数独</title>
    <url>/2020/07/LeetCode/%E3%80%90LeetCode%E3%80%9137%20-%20%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个程序，通过已填充的空格来解决数独问题。</p>
<p>一个数独的解法需遵循如下规则：</p>
<p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<br>空白格用 ‘.’ 表示。</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p><strong>回溯法</strong>：从左到右，从上到下，遇到空格依次填入数字1-9，然后判断是否合法。如果该位置的数字合法，则继续向前试探；如果数字不合法，则回溯到上一步，填入下一个数字。如果该格子填入了数字1-9都不合法，那么就要继续回溯，以此类推。当所有的格子都被填完了，且合法，那么数独就解出来了。</p>
<h3 id="判断数字是否合法"><a href="#判断数字是否合法" class="headerlink" title="判断数字是否合法"></a>判断数字是否合法</h3><p>要想使得该空格上的数字合法，要满足下面三个要求（假设board[row][col] = num）:<br>1，第row行无数字num<br>2，第col列无数字num<br>3，该空格所属九宫格也没有数字num</p>
<h3 id="遍历该空格所处九宫格"><a href="#遍历该空格所处九宫格" class="headerlink" title="遍历该空格所处九宫格"></a>遍历该空格所处九宫格</h3><p>1，首先我们要找到该九宫格的左上角位置，从它开始遍历。即：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">board[<span class="number">3</span> * (row / <span class="number">3</span>)][<span class="number">3</span> * (col / <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>
<p>然后依次从左上角格子开始，依次（从左到右，从上到下）遍历九宫格内的九个格子，这里需要巧妙使用除法（/）和取模（%）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i从0-8</span></span><br><span class="line">board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        dfs(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历所有格子</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="number">9</span>; row++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; <span class="number">9</span>; col++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//是否已经有数字</span></span><br><span class="line">                <span class="keyword">if</span>(board[row][col] != <span class="string">'.'</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//尝试填入数字1-9</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> num = <span class="string">'1'</span>; num &lt;= <span class="string">'9'</span>; num++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//数字合法，向下试探</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">isValid</span>(board, row, col, num))&#123;</span><br><span class="line">                        board[row][col] = num;</span><br><span class="line">                        <span class="comment">//向下试探</span></span><br><span class="line">                        <span class="keyword">if</span>(dfs(board))&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//回溯</span></span><br><span class="line">                        board[row][col] = <span class="string">'.'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//数字1-9都不合法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][col] == num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[row][i] == num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[<span class="number">3</span> * (row / <span class="number">3</span>) + i / <span class="number">3</span>][<span class="number">3</span> * (col / <span class="number">3</span>) + i % <span class="number">3</span>] == num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/LeetCode/%E3%80%90LeetCode%E3%80%9137%20-%20%E8%A7%A3%E6%95%B0%E7%8B%AC-1.png" alt="运行结果"></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>回溯法  数独</tag>
      </tags>
  </entry>
  <entry>
    <title>Tiny-Renderer-01  Bresenham画线算法</title>
    <url>/2020/06/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93%E5%99%A8/Tiny-Renderer-01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1，屏幕上的图像本质上是一个个不同颜色的小点<br>2，模型是由大量的三角形网格（mesh）组成的</p>
<h2 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h2><p>想要在两点之间画一条线段，本质上就是在这两点之间寻找一系列最接近这条直线的像素点来模拟这条直线。根据Bresenham画线算法，利用直线的参数方程，我们可以写出这样的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">line_1</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, PNGImage&amp; <span class="built_in">image</span>, Color color)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">float</span> t = <span class="number">0</span>; t &lt; <span class="number">1</span>; t += <span class="number">0.001</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = x0 + (x1 - x0) * t;</span><br><span class="line">		<span class="keyword">int</span> y = y0 + (y1 - y0) * t;</span><br><span class="line">		<span class="built_in">image</span>.<span class="built_in">set</span>(x, y, color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中（x0，y0）和（x1，y1）分别是起终点的坐标，image是绘制的目标图片，Color表示这条线段上的点的颜色<br><img src="https://github.com/Morakito/Blog-Images/raw/Tiny-Renderer/1-1.png" alt="line_1()画出的线段"></p>
<h2 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h2><p>line_1函数首先是低效的，但其实它最大的问题在于<strong>间隔常数</strong>的选择，上述代码中我选择了0.001作为步长，画出来的线段像素点很密集，但是如果我将常数选择为0.01甚至是0.1，那么将会画出下面这样的线段：<br><img src="https://github.com/Morakito/Blog-Images/raw/Tiny-Renderer/1-2.png" alt="line_1()画出的像我头发一样稀疏的线段"></p>
<p>1，当间隔常数选择过大时，画出来的线段过于稀疏。<br>2，当间隔常数选择过小时，画出来的线段虽然很密集，但是会出现很多点重合在一起的情况，这样大大降低了画线的效率<br>可以这样认为，间隔常数代表了每次前进的步长，其实就是控制了两点之间线段上<strong>像素点的个数</strong>，我们可以这样改写代码（仍然存在问题）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">line_2</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, PNGImage&amp; <span class="built_in">image</span>, Color color)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = x0; x &lt;= x1; x++) &#123;</span><br><span class="line">		<span class="comment">//这里需注意不能除以int类型的</span></span><br><span class="line">		<span class="keyword">float</span> t = (x - x0) / (<span class="keyword">float</span>)(x1 - x0);</span><br><span class="line">		<span class="keyword">int</span> y = y0 * (<span class="number">1.0</span> - t) + y1 * (<span class="keyword">double</span>)t;</span><br><span class="line">		<span class="built_in">image</span>.<span class="built_in">set</span>(x, y, color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（注意：需要将x1-x0的结果转换成浮点数类型，不然会在接下来的除法中损失精度）<br>用上面的画线算法来试着画三条线段：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">line_2(<span class="number">20</span>, <span class="number">13</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="built_in">image</span>, Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//下面两条线段方向相反，颜色一白一红</span></span><br><span class="line">line_2(<span class="number">13</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="built_in">image</span>, Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">line_2(<span class="number">80</span>, <span class="number">40</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="built_in">image</span>, Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/Tiny-Renderer/1-3.png" alt="line_2()画的三条线段"><br>1，平缓的白色线段表现良好，像素点密集；陡峭的红色线段表现一般，像素点较为稀疏。<br>2，这里我们画了三条线，但是只出现了两条线。<br>仔细分析一下：</p>
<blockquote>
<p>   我们先画了从（13, 20）到（80, 40）的白色线段；然后紧接着画了从（80, 40）到（13, 20）的红色线段。按照我们设想的来说，应该是后画的红色会覆盖掉先画的白色线&gt; 段。但是程序没有按照我们预期的执行，红色线段没有出现，也就是没有绘制。这也就是意味着，line_2函数是否执行跟线段的方向有关。line_2函数不满足<strong>对称性</strong>。</p>
</blockquote>
<h2 id="版本三"><a href="#版本三" class="headerlink" title="版本三"></a>版本三</h2><p>现在我们需要解决版本二中画线函数的问题：</p>
<blockquote>
<p>  （1）当线段陡峭的时候（斜率大于1），画出来的线段像素点比较稀疏<br>  （2）若x0 &lt; x1，则无法画线（for循环的初始条件）</p>
</blockquote>
<p>我们的方法是：</p>
<blockquote>
<p>  （1）当线段陡峭时，交换x轴和y轴，用<strong>跨度较大的维度前进</strong>，画出较多的像素点<br>  （2）判断x0和x1的大小关系，保证<strong>从左向右</strong>画线</p>
</blockquote>
<p>修正的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">line_3</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, PNGImage&amp; <span class="built_in">image</span>, Color color)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//是否陡峭</span></span><br><span class="line">	<span class="comment">//如果陡峭的话,则交换x轴和y轴，用跨度大的轴前进</span></span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">abs</span>(x0 - x1) &lt; <span class="built_in">std</span>::<span class="built_in">abs</span>(y0 - y1)) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(x0, y0);</span><br><span class="line">		<span class="built_in">std</span>::swap(x1, y1);</span><br><span class="line">		steep = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//保证从左向右画线</span></span><br><span class="line">	<span class="keyword">if</span> (x0 &gt; x1) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(x0, x1);</span><br><span class="line">		<span class="built_in">std</span>::swap(y0, y1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = x0; x &lt;= x1; x++) &#123;</span><br><span class="line">		<span class="keyword">float</span> t = (x - x0) / (<span class="keyword">float</span>)(x1 - x0);</span><br><span class="line">		<span class="keyword">int</span> y = y0 * (<span class="number">1.0</span> - t) + y1 * (<span class="keyword">double</span>)t;</span><br><span class="line">		<span class="keyword">if</span> (steep) &#123;</span><br><span class="line">			<span class="comment">//前面因为陡峭交换了坐标轴，这里需要交换回来</span></span><br><span class="line">			<span class="built_in">image</span>.<span class="built_in">set</span>(y, x, color);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">image</span>.<span class="built_in">set</span>(x, y, color);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/Morakito/Blog-Images/raw/Tiny-Renderer/1-4.png" alt="line_3()画的三条线段"></p>
<h2 id="版本三的优化"><a href="#版本三的优化" class="headerlink" title="版本三的优化"></a>版本三的优化</h2><p>1，line_3函数已经是个正确的函数了，它可以在直线陡峭，反向的时候判断修正，画出正确的线段。<br>2，但是为了保证渲染器的高效，我们要尽可能地优化画线函数地效率<br>分析一下存在的效率问题：</p>
<blockquote>
<p>   1，被除数x1-x0是常数，可以拿到循环外部<br>   2，算法中存在除法和乘法这样低效的运算</p>
</blockquote>
<p>我们可以参考中点画线算法的思想，来修正像素的落点，代码修改如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">line_4</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, PNGImage&amp; <span class="built_in">image</span>, Color color)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//如果陡峭的话,则交换x轴和y轴，用跨度大的轴前进</span></span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">abs</span>(x0 - x1) &lt; <span class="built_in">std</span>::<span class="built_in">abs</span>(y0 - y1)) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(x0, y0);</span><br><span class="line">		<span class="built_in">std</span>::swap(x1, y1);</span><br><span class="line">		steep = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//保证从左向右画线</span></span><br><span class="line">	<span class="keyword">if</span> (x0 &gt; x1) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(x0, x1);</span><br><span class="line">		<span class="built_in">std</span>::swap(y0, y1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//直线斜率的绝对值</span></span><br><span class="line">	<span class="keyword">float</span> k = <span class="built_in">std</span>::<span class="built_in">abs</span>((y1 - y0) / <span class="keyword">float</span>(x1 - x0));</span><br><span class="line">	<span class="keyword">float</span> error = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = x0, y = y0; x &lt;= x1; ++x) &#123;</span><br><span class="line">		<span class="keyword">if</span> (steep) &#123;</span><br><span class="line">			<span class="built_in">image</span>.<span class="built_in">set</span>(y, x, color);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">image</span>.<span class="built_in">set</span>(x, y, color);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//修正下一个像素的落点</span></span><br><span class="line">		error += k;</span><br><span class="line">		<span class="keyword">if</span> (error &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">			y += (y1 &gt; y0 ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">			error -= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="进一步的优化"><a href="#进一步的优化" class="headerlink" title="进一步的优化"></a>进一步的优化</h2><p>我们优化了算法中的除法和乘法，将它们修正成了简单的加法。现在我们要将目光放在算法中的浮点数上。</p>
<p>//TODO</p>
]]></content>
      <categories>
        <category>光栅化渲染器</category>
      </categories>
      <tags>
        <tag>Bresenham</tag>
        <tag>画线算法</tag>
      </tags>
  </entry>
</search>
